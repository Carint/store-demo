---
import Layout from '../layouts/Layout.astro';
import { products } from '../data/products';

// Obtener parámetros de la URL para filtros y paginación
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const category = url.searchParams.get('category') || '';
const priceMin = parseInt(url.searchParams.get('priceMin') || '0');
const priceMax = parseInt(url.searchParams.get('priceMax') || '10000');
const inStock = url.searchParams.get('inStock') === 'true';
const searchQuery = url.searchParams.get('search') || '';

// Filtrar productos
let filteredProducts = products;

// Filtro por búsqueda
if (searchQuery) {
  filteredProducts = filteredProducts.filter(product => 
    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    product.category.toLowerCase().includes(searchQuery.toLowerCase())
  );
}

if (category) {
  filteredProducts = filteredProducts.filter(product => 
    product.category.toLowerCase().includes(category.toLowerCase())
  );
}

if (priceMin > 0 || priceMax < 10000) {
  filteredProducts = filteredProducts.filter(product => 
    product.price >= priceMin && product.price <= priceMax
  );
}

if (inStock) {
  filteredProducts = filteredProducts.filter(product => product.inStock);
}

// Paginación
const productsPerPage = 8;
const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
const startIndex = (page - 1) * productsPerPage;
const paginatedProducts = filteredProducts.slice(startIndex, startIndex + productsPerPage);

// Obtener categorías únicas para los filtros
const categories = [...new Set(products.map(product => product.category))];
const maxPrice = Math.max(...products.map(product => product.price));
---

<Layout title="Catálogo de Productos - Store Demo">
	<div class="catalog-header">
		<h1 class="catalog-title">Catálogo de Productos</h1>
		<p class="catalog-subtitle">Descubre nuestra colección de productos de moda</p>
	</div>

	<div class="catalog-content">
		<aside class="filters-sidebar">
			<div class="search-section">
				<h3>Buscar Productos</h3>
				<div class="search-input-container">
					<input 
						type="text" 
						id="searchInput" 
						placeholder="Buscar por nombre o categoría..."
						value={searchQuery}
						oninput="handleSearch()"
						class="search-input"
					/>
					<button class="search-btn" onclick="performSearch()">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>
							<path d="M21 21L16.65 16.65" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
					</button>
				</div>
			</div>
			
			<div class="filters-header">
				<h3>Filtros</h3>
				<button class="clear-filters" onclick="clearAllFilters()">Limpiar</button>
			</div>
			
			<div class="filter-group">
				<h4>Categoría</h4>
				<div class="filter-options">
					{categories.map(cat => (
						<label class="filter-option">
							<input 
								type="radio" 
								name="category" 
								value={cat}
								checked={category === cat}
								onchange="applyFilters()"
							/>
							<span>{cat}</span>
						</label>
					))}
					<label class="filter-option">
						<input 
							type="radio" 
							name="category" 
							value=""
							checked={!category}
							onchange="applyFilters()"
						/>
						<span>Todas</span>
					</label>
				</div>
			</div>

			<div class="filter-group">
				<h4>Precio</h4>
				<div class="price-range">
					<input 
						type="range" 
						id="priceRange" 
						min="0" 
						max={maxPrice} 
						value={priceMax}
						oninput="updatePriceDisplay()"
						onchange="applyFilters()"
					/>
					<div class="price-display">
						<span>$0</span>
						<span id="maxPrice">$<span id="priceValue">{priceMax}</span></span>
					</div>
				</div>
			</div>

			<div class="filter-group">
				<label class="filter-option">
					<input 
						type="checkbox" 
						name="inStock"
						checked={inStock}
						onchange="applyFilters()"
					/>
					<span>Solo en stock</span>
				</label>
			</div>
		</aside>

		<main class="products-section">
			<div class="products-header">
				<div class="results-info">
					<p>{filteredProducts.length} productos encontrados</p>
				</div>
				<div class="sort-options">
					<select onchange="sortProducts(this.value)">
						<option value="name">Ordenar por nombre</option>
						<option value="price-low">Precio: menor a mayor</option>
						<option value="price-high">Precio: mayor a menor</option>
						<option value="category">Categoría</option>
					</select>
				</div>
			</div>

			<div class="products-grid">
				{paginatedProducts.map(product => (
					<article class="product-card">
						<a href={`/producto/${product.id}`} class="product-link">
							<div class="product-image">
								<img src={product.image} alt={product.name} />
								{!product.inStock && <div class="out-of-stock-overlay">Agotado</div>}
							</div>
							<div class="product-info">
								<h3 class="product-name">{product.name}</h3>
								<p class="product-category">{product.category}</p>
								<div class="product-colors">
									{product.colors.slice(0, 4).map(color => (
										<span class="color-dot" style={`background-color: ${color.toLowerCase()}`}></span>
									))}
									{product.colors.length > 4 && <span class="more-colors">+{product.colors.length - 4}</span>}
								</div>
								<div class="product-price">
									<span class="price">${product.price.toLocaleString()}</span>
									{!product.inStock && <span class="stock-status out">Agotado</span>}
									{product.inStock && <span class="stock-status in">En stock</span>}
								</div>
							</div>
						</a>
						<button class="add-to-cart" disabled={!product.inStock}>
							{product.inStock ? 'Agregar al carrito' : 'No disponible'}
						</button>
					</article>
				))}
			</div>

			{totalPages > 1 && (
				<div class="pagination">
					<button 
						class="pagination-btn" 
						onclick={`changePage(${page - 1})`}
						disabled={page <= 1}
					>
						Anterior
					</button>
					
					<div class="pagination-numbers">
						{Array.from({length: totalPages}, (_, i) => i + 1).map(pageNum => (
							<button 
								class={`pagination-number ${pageNum === page ? 'active' : ''}`}
								onclick={`changePage(${pageNum})`}
							>
								{pageNum}
							</button>
						))}
					</div>
					
					<button 
						class="pagination-btn" 
						onclick={`changePage(${page + 1})`}
						disabled={page >= totalPages}
					>
						Siguiente
					</button>
				</div>
			)}
		</main>
	</div>
</Layout>

<style>
	.catalog-header {
		text-align: center;
		margin-bottom: 3rem;
		padding: 2rem 0;
		background: linear-gradient(135deg, var(--background-light) 0%, var(--background-color) 100%);
		border-radius: 12px;
	}
	
	.catalog-title {
		font-size: 2.5rem;
		font-weight: 800;
		margin: 0 0 0.5rem 0;
		color: var(--text-color);
		letter-spacing: -0.025em;
	}
	
	.catalog-subtitle {
		color: var(--text-light);
		font-size: 1.1rem;
		margin: 0;
	}
	
	.catalog-content {
		display: grid;
		grid-template-columns: 280px 1fr;
		gap: 3rem;
		margin-bottom: 4rem;
	}
	
	/* Filtros */
	.filters-sidebar {
		background: var(--background-color);
		border: 1px solid var(--border-color);
		border-radius: 12px;
		padding: 2rem;
		height: fit-content;
		position: sticky;
		top: 100px;
	}
	
	.search-section {
		margin-bottom: 2rem;
		padding-bottom: 2rem;
		border-bottom: 1px solid var(--border-color);
	}
	
	.search-section h3 {
		font-size: 1.25rem;
		font-weight: 700;
		margin: 0 0 1rem 0;
		color: var(--text-color);
	}
	
	.search-input-container {
		position: relative;
		display: flex;
		align-items: center;
	}
	
	.search-input {
		width: 100%;
		padding: 0.75rem 3rem 0.75rem 1rem;
		border: 1px solid var(--border-color);
		border-radius: 8px;
		font-size: 0.9rem;
		background: var(--background-color);
		color: var(--text-color);
		transition: all 0.2s ease;
	}
	
	.search-input:focus {
		outline: none;
		border-color: var(--primary-color);
		box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
	}
	
	.search-btn {
		position: absolute;
		right: 0.5rem;
		top: 50%;
		transform: translateY(-50%);
		width: 32px;
		height: 32px;
		background: var(--primary-color);
		border: none;
		border-radius: 6px;
		color: white;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.2s ease;
	}
	
	.search-btn:hover {
		background: var(--primary-hover);
		transform: translateY(-50%) scale(1.05);
	}
	
	.filters-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 2rem;
	}
	
	.filters-header h3 {
		font-size: 1.25rem;
		font-weight: 700;
		margin: 0;
		color: var(--text-color);
	}
	
	.clear-filters {
		background: none;
		border: 1px solid var(--border-color);
		color: var(--text-light);
		padding: 0.5rem 1rem;
		border-radius: 6px;
		font-size: 0.85rem;
		cursor: pointer;
		transition: all 0.2s ease;
	}
	
	.clear-filters:hover {
		background: var(--background-light);
		color: var(--text-color);
	}
	
	.filter-group {
		margin-bottom: 2rem;
	}
	
	.filter-group h4 {
		font-size: 1rem;
		font-weight: 600;
		margin: 0 0 1rem 0;
		color: var(--text-color);
	}
	
	.filter-options {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}
	
	.filter-option {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		cursor: pointer;
		font-size: 0.9rem;
		color: var(--text-light);
		transition: color 0.2s ease;
	}
	
	.filter-option:hover {
		color: var(--text-color);
	}
	
	.filter-option input[type="radio"],
	.filter-option input[type="checkbox"] {
		width: 16px;
		height: 16px;
		accent-color: var(--primary-color);
	}
	
	.price-range {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}
	
	.price-range input[type="range"] {
		width: 100%;
		height: 6px;
		border-radius: 3px;
		background: var(--border-color);
		outline: none;
		-webkit-appearance: none;
	}
	
	.price-range input[type="range"]::-webkit-slider-thumb {
		-webkit-appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: var(--primary-color);
		cursor: pointer;
	}
	
	.price-display {
		display: flex;
		justify-content: space-between;
		font-size: 0.9rem;
		color: var(--text-light);
	}
	
	/* Productos */
	.products-section {
		display: flex;
		flex-direction: column;
		gap: 2rem;
	}
	
	.products-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1rem 0;
		border-bottom: 1px solid var(--border-color);
	}
	
	.results-info p {
		margin: 0;
		color: var(--text-light);
		font-size: 0.9rem;
	}
	
	.sort-options select {
		padding: 0.5rem 1rem;
		border: 1px solid var(--border-color);
		border-radius: 6px;
		background: var(--background-color);
		color: var(--text-color);
		font-size: 0.9rem;
		cursor: pointer;
	}
	
	.products-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 2rem;
	}
	
	.product-card {
		background: var(--background-color);
		border: 1px solid var(--border-color);
		border-radius: 12px;
		overflow: hidden;
		transition: all 0.2s ease;
		position: relative;
		display: flex;
		flex-direction: column;
	}
	
	.product-card:hover {
		transform: translateY(-4px);
		box-shadow: var(--shadow-md);
		border-color: var(--primary-color);
	}
	
	.product-link {
		text-decoration: none;
		color: inherit;
		flex: 1;
		display: flex;
		flex-direction: column;
	}
	
	.product-link:hover {
		text-decoration: none;
		color: inherit;
	}
	
	.product-image {
		position: relative;
		aspect-ratio: 1;
		overflow: hidden;
	}
	
	.product-image img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.2s ease;
	}
	
	.product-card:hover .product-image img {
		transform: scale(1.05);
	}
	
	.out-of-stock-overlay {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0, 0, 0, 0.7);
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		font-weight: 600;
		font-size: 1.1rem;
	}
	
	.product-info {
		padding: 1.5rem;
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}
	
	.product-name {
		font-size: 1.1rem;
		font-weight: 600;
		margin: 0;
		color: var(--text-color);
		line-height: 1.3;
	}
	
	.product-category {
		font-size: 0.85rem;
		color: var(--text-light);
		margin: 0;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}
	
	.product-colors {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}
	
	.color-dot {
		width: 16px;
		height: 16px;
		border-radius: 50%;
		border: 2px solid var(--border-color);
	}
	
	.more-colors {
		font-size: 0.8rem;
		color: var(--text-light);
	}
	
	.product-price {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-top: 0.5rem;
	}
	
	.price {
		font-size: 1.25rem;
		font-weight: 700;
		color: var(--text-color);
	}
	
	.stock-status {
		font-size: 0.8rem;
		font-weight: 500;
		padding: 0.25rem 0.5rem;
		border-radius: 4px;
	}
	
	.stock-status.in {
		background: #dcfce7;
		color: #166534;
	}
	
	.stock-status.out {
		background: #fee2e2;
		color: #dc2626;
	}
	
	.add-to-cart {
		width: 100%;
		padding: 0.75rem 1rem;
		background: var(--primary-color);
		color: white;
		border: none;
		border-radius: 8px;
		font-weight: 600;
		font-size: 0.9rem;
		cursor: pointer;
		transition: all 0.2s ease;
		margin-top: 0.5rem;
	}
	
	.add-to-cart:hover:not(:disabled) {
		background: var(--primary-hover);
		transform: translateY(-1px);
	}
	
	.add-to-cart:disabled {
		background: var(--border-color);
		color: var(--text-muted);
		cursor: not-allowed;
	}
	
	/* Paginación */
	.pagination {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 1rem;
		margin-top: 3rem;
		padding: 2rem 0;
	}
	
	.pagination-btn {
		padding: 0.75rem 1.5rem;
		background: var(--background-color);
		border: 1px solid var(--border-color);
		border-radius: 8px;
		color: var(--text-color);
		font-weight: 500;
		cursor: pointer;
		transition: all 0.2s ease;
	}
	
	.pagination-btn:hover:not(:disabled) {
		background: var(--primary-color);
		color: white;
		border-color: var(--primary-color);
	}
	
	.pagination-btn:disabled {
		background: var(--background-light);
		color: var(--text-muted);
		cursor: not-allowed;
	}
	
	.pagination-numbers {
		display: flex;
		gap: 0.5rem;
	}
	
	.pagination-number {
		width: 40px;
		height: 40px;
		background: var(--background-color);
		border: 1px solid var(--border-color);
		border-radius: 8px;
		color: var(--text-color);
		font-weight: 500;
		cursor: pointer;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	
	.pagination-number:hover {
		background: var(--primary-color);
		color: white;
		border-color: var(--primary-color);
	}
	
	.pagination-number.active {
		background: var(--primary-color);
		color: white;
		border-color: var(--primary-color);
	}
	
	/* Responsive */
	@media (max-width: 1024px) {
		.catalog-content {
			grid-template-columns: 1fr;
			gap: 2rem;
		}
		
		.filters-sidebar {
			position: static;
			order: 2;
		}
		
		.products-section {
			order: 1;
		}
	}
	
	@media (max-width: 768px) {
		.catalog-title {
			font-size: 2rem;
		}
		
		.products-grid {
			grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
			gap: 1.5rem;
		}
		
		.products-header {
			flex-direction: column;
			gap: 1rem;
			align-items: stretch;
		}
		
		.pagination {
			flex-wrap: wrap;
			gap: 0.5rem;
		}
		
		.pagination-number {
			width: 35px;
			height: 35px;
		}
	}
	
	@media (max-width: 480px) {
		.products-grid {
			grid-template-columns: 1fr;
		}
		
		.filters-sidebar {
			padding: 1.5rem;
		}
	}
</style>

<script>
	let searchTimeout: NodeJS.Timeout;
	
	function handleSearch() {
		clearTimeout(searchTimeout);
		searchTimeout = setTimeout(() => {
			performSearch();
		}, 500); // Debounce de 500ms
	}
	
	function performSearch() {
		const searchInput = document.getElementById('searchInput') as HTMLInputElement;
		const searchQuery = searchInput?.value || '';
		
		const params = new URLSearchParams(window.location.search);
		if (searchQuery.trim()) {
			params.set('search', searchQuery.trim());
		} else {
			params.delete('search');
		}
		params.delete('page'); // Reset a página 1 al buscar
		
		window.location.href = `/catalogo?${params.toString()}`;
	}
	
	function applyFilters() {
		const categoryElement = document.querySelector('input[name="category"]:checked') as HTMLInputElement;
		const category = categoryElement?.value || '';
		const priceRangeElement = document.getElementById('priceRange') as HTMLInputElement;
		const priceMax = priceRangeElement?.value || '10000';
		const inStockElement = document.querySelector('input[name="inStock"]') as HTMLInputElement;
		const inStock = inStockElement?.checked || false;
		const searchInput = document.getElementById('searchInput') as HTMLInputElement;
		const searchQuery = searchInput?.value || '';
		
		const params = new URLSearchParams();
		if (searchQuery.trim()) params.set('search', searchQuery.trim());
		if (category) params.set('category', category);
		if (parseInt(priceMax) < 10000) params.set('priceMax', priceMax);
		if (inStock) params.set('inStock', 'true');
		
		window.location.href = `/catalogo?${params.toString()}`;
	}
	
	function clearAllFilters() {
		window.location.href = '/catalogo';
	}
	
	function updatePriceDisplay() {
		const priceValue = document.getElementById('priceValue');
		const priceRange = document.getElementById('priceRange') as HTMLInputElement;
		if (priceValue && priceRange) {
			priceValue.textContent = priceRange.value;
		}
	}
	
	function changePage(page: number) {
		const url = new URL(window.location.href);
		url.searchParams.set('page', page.toString());
		window.location.href = url.toString();
	}
	
	function sortProducts(sortBy: string) {
		// Implementar lógica de ordenamiento
		console.log('Sorting by:', sortBy);
	}
	
	// Permitir búsqueda con Enter
	document.addEventListener('DOMContentLoaded', function() {
		const searchInput = document.getElementById('searchInput') as HTMLInputElement;
		if (searchInput) {
			searchInput.addEventListener('keypress', function(e) {
				if (e.key === 'Enter') {
					e.preventDefault();
					performSearch();
				}
			});
		}
	});
</script>
